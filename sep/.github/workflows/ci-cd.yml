# Node.js CI/CD GitHub Actions Workflow

name: Node.js CI/CD  # Name of the workflow

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the 'main' branch
  pull_request:
    branches:
      - main  # Trigger the workflow on pull request to the 'main' branch

jobs:
  # CI Job: Continuous Integration (Testing the code)
  test:
    runs-on: ubuntu-latest  # Choose Ubuntu environment to run the job (you can change to windows-latest or macos-latest if needed)

    steps:
      # Step 1: Checkout the repository to get the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (Define which Node version to use)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Specifies Node.js version 18 for the tests

      # Step 3: Install project dependencies
      - name: Install dependencies
        run: npm install  # This installs all the dependencies listed in package.json

      # Step 4: Run tests using a testing framework (e.g., Mocha, Jest)
      - name: Run tests
        run: npm test  # This will run your test suite, assuming it's defined in your package.json under "test"

      # Step 5: Optional - You can add any additional steps if needed
      # For example, linting or coverage checks:
      # - name: Run lint
      #   run: npm run lint  # If you have a linting step defined in package.json

  # CD Job: Continuous Deployment (Deploy to your hosting service)
  deploy:
    runs-on: ubuntu-latest  # Choose Ubuntu environment for deployment
    needs: test  # Ensure that deployment happens only if the tests pass (dependencies)

    steps:
      # Step 1: Checkout the repository again (to have the latest changes)
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js (Define which Node version to use)
      - name: Set up Node.js for deployment
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install dependencies (install only production dependencies)
      - name: Install dependencies for production
        run: npm install --only=production  # Only install production dependencies

      # Step 4: Build the project (if applicable, for example, React build)
      - name: Build the project (if applicable)
        run: npm run build  # This would be necessary for a React or front-end build process

      # Step 5: Deploy to a cloud platform (e.g., AWS, Heroku, DigitalOcean, etc.)
      # Example for deploying to Heroku:
      - name: Deploy to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}  # Ensure the Heroku API key is stored as a secret in GitHub
        run: |
          git remote add heroku https://git.heroku.com/your-app-name.git
          git push heroku main  # Push the code to the Heroku app

      # Step 6: (Optional) Notify on success or failure (you can set up notifications via Slack, email, etc.)
      # For example, you can add a step to send a notification to Slack or another service when the deployment is complete.
      # Add further actions as needed for your deployment process.

